@page "/Quiz"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject UserSessionService UserSession  

<PageTitle>Attendance Quiz</PageTitle>

<h1>Attendance Quiz</h1>

<h3>Component</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (questions == null)
{
    <p>Loading questions...</p>
}
else
{
    <form @onsubmit="HandleSubmitAsync">
        @foreach (var question in questions)
        {
            <div class="question-container">
                <p>@question.QuestionText</p>

                <input type="radio" id="@($"q{question.QuestionId}_a")" name="@($"q{question.QuestionId}")" value="1" @onchange="e => HandleAnswerSelection(e, question.QuestionId.ToString())" required>
                <label for="@($"q{question.QuestionId}_a")">@question.OptionA</label><br>

                <input type="radio" id="@($"q{question.QuestionId}_b")" name="@($"q{question.QuestionId}")" value="2" @onchange="e => HandleAnswerSelection(e, question.QuestionId.ToString())">
                <label for="@($"q{question.QuestionId}_b")">@question.OptionB</label><br>

                <input type="radio" id="@($"q{question.QuestionId}_c")" name="@($"q{question.QuestionId}")" value="3" @onchange="e => HandleAnswerSelection(e, question.QuestionId.ToString())">
                <label for="@($"q{question.QuestionId}_c")">@question.OptionC</label><br>

                <input type="radio" id="@($"q{question.QuestionId}_d")" name="@($"q{question.QuestionId}")" value="4" @onchange="e => HandleAnswerSelection(e, question.QuestionId.ToString())">
                <label for="@($"q{question.QuestionId}_d")">@question.OptionD</label><br>
            </div>
        }
        <button type="submit">Submit</button>
    </form>
}

@code {
    private List<QuizQuestion> questions;
    private Dictionary<string, string> answers = new();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // 🚨 ADD THIS:
        if (UserSession.LoggedInStudent is null)
        {
            NavigationManager.NavigateTo("/", true);
            return;
        }

        questions = await Context.QuizQuestions.ToListAsync();
    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            foreach (var entry in answers)
            {
                var response = new QuizResponse
                {
                    AttendanceId = 101, // Dummy
                    SessionId = 1,    // Dummy
                    SelectedAnswer = entry.Value
                };
                Context.QuizResponses.Add(response);
            }

            await Context.SaveChangesAsync();

            var queryParams = string.Join("&", answers.Select(a => $"q{a.Key}={a.Value}"));
            NavigationManager.NavigateTo($"/results?{queryParams}");
        }
        catch (DbUpdateException ex)
        {
            errorMessage = "Database error: " + ex.InnerException?.Message ?? ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred: " + ex.Message;
        }
    }

    private void HandleAnswerSelection(ChangeEventArgs e, string questionId)
    {
        if (e.Value != null)
        {
            answers[questionId] = e.Value.ToString();
        }
    }
}

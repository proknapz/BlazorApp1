@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<p>Welcome to your new app.</p>

<form action="/Quiz" method="get">
    <label for="utdId">UTD ID:</label>
    <input type="text" id="utdId" name="utdId" maxlength="10" required>
    <br>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required>
    <br>
    <button type="submit">Submit</button>
</form>

<!-- Link to the teacher page -->


<!-- Display the IP address -->
<p>Your Public IP Address: @ipAddress</p>

@code {
    private string ipAddress = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        // Make an API call to an external service to get the public IP address
        try
        {
            ipAddress = await Http.GetStringAsync("https://api.ipify.org");
        }
        catch
        {
            ipAddress = "Unable to fetch IP";
        }
    }
}


@*
<h3>Instructor List</h3>


@if (instructors != null && instructors.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Instructor ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Username</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var instructor in instructors)
            {
                <tr>
                    <td>@instructor.InstructorId</td>
                    <td>@instructor.FirstName</td>
                    <td>@instructor.LastName</td>
                    <td>@instructor.Email</td>
                    <td>@instructor.Username</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No instructors available.</p>
}

@code {
    private List<Instructor> instructors = new();  // Initialize to an empty list

    protected override async Task OnInitializedAsync()
    {
        // Safely load data and handle possible issues
        try
        {
            instructors = await DbContext.Instructors.ToListAsync() ?? new List<Instructor>(); // If null, initialize to an empty list
        }
        catch (Exception ex)
        {
            // Log or handle the exception as needed
            Console.WriteLine($"Error loading instructors: {ex.Message}");
            instructors = new List<Instructor>(); // Fall back to an empty list if there's an error
        }
    }
}
*@
